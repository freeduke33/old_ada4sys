              Описание функций взаимодействия с УСО
            -----------------------------------------


        Интерфейс взаимодействия с УСО предназначен для унификации
процедур управления объектом с использованием разнообразного аппаратного
обеспечения. Интерфейсные функции реализует драйвер УСО,специализированный
для каждой аппаратной конфигурации. Для доступа к процедурам драйвера из
языка С может использоватся небольшой набор функций этого языка, упрощяющих
программирование. Ниже представлено полное описание этих функций. Все функции
возвращают результат своего выполнения :


  DRV_OK      - функция завершилась успешно
  DRV_FAILED  - произошла ошибка во время выполнения
  DRV_NONE    - отсутствует драйвер УСО
  DRV_ERRARG  - неверные аргументы функции
  DRV_ERRFUN  - вызов неопределенной функции

1. Инициализация драйвера и УСО, подготовка к работе.
2. Управление УСО.
3. Информация по работе УСО и драйвера.
4. Информация по установленному оборудованию и драйверу УСО.

1. Инициализация драйвера и УСО, подготовка к работе.

Вызов: int DrvIsPresent(void);
Назначение: Проверить присутствие драйвера ЦАП/АЦП в памяти
Аргументы: --//--
Результат:   0 - Драйвер УСО не найден
           <>0 - Драйвер УСО загружен в память
Описание:
       Прежде чем приступить к работе, необходимо удостоверится в присутствии
  необходимого драйвера УСО в памяти компьютера. Этот драйвер должен быть
  загружен до запуска основной программы. Указанная функция проверяет наличие
  драйвера и сообщает программе о результатах.

Пример:

   /* ... */
   main()
     {
     if(DrvIsPresent()) /* <-- Проверяем присутствие драйвера */
        {
         /* Нормальная работа с УСО */
        }
     else printf("Нет драйвера УСО");
     }


Вызов: int DrvInitialize(void);
Назначение: Инициализировать драйвер ЦАП/АЦП
Аргументы: --//--
Результат: DRV_FAILED - Драйвер или УСО к работе не готовы
           DRV_OK     - Драйвер и УСО подготовлены к работе
Описание:
    Подготавливает УСО к работе, настраивает драйвер на запущенное
  приложение для оптимизации работы.

Пример:

    /* ... */
    main()
      {
      if(DrvIsPresent())
        {
        if(DrvInitialize()==DRV_OK) /* <-- Инициализируем драйвер */
           {

           /* необходимые действия по управлению УСО */

           DrvDeinitialize();
           }
        }
      }

Вызов: int DrvDeinitialize(void);
Назначение: Деинициализировать драйвер ЦАП/АЦП
Аргументы:
Результат: DRV_OK     - Деинициализация драйвера и УСО прошла успешно
           DRV_FAILED - Ошибка во время деинициализации
Описание:
    Переключает УСО в режим ожидания,
Пример:

    /* ... */
    main()
      {
      if(DrvIsPresent())
        {
        if(DrvInitialize()==DRV_OK)
           {

           /* необходимые действия по управлению УСО */

           DrvDeinitialize(); /* <-- Уходим в режим ожидания */
           }
        }
      }

Вызов: int DrvEnable(float Freq);
       int _DrvEnable(Word DivHi,Word DivLo);
Назначение: Начать сеанс управления УСО в
Аргументы:
    Вариант 1
      Freq - частота подачи/съема сигналов с/на ЦАП/АЦП
    Вариант 2
      DivHi - старшая часть делителя частоты
      DivLo - младша часть делителя частоты
      Делитель частоты определется как делитель максимальной частоты УСО
      для получени нужной частоты управления в запускаемом сеансе работы
      с УСО
Результат: DRV_OK     - Сеанс управления УСО запущен успешно
           DRV_FAILED - Ошибка во время старта сеанса
Описание:
       Запускает новый сеанс управлени УСО. После успешного
  выполнения этой функции можно начинать манипуляции по формированию
  управляющих воздействий и съема отклика для управляемого объекта.

Пример:

    /* ... */
    main()
      {
      if(DrvIsPresent())
        {
        if(DrvInitialize()==DRV_OK)
           {

           /* Подготовительные действия перед сеансом управления */

           if(DrvEnable(120)==DRV_OK)  /* <-- Начать сеанс управления УСО */
             {

             /* сеанс управления УСО */

             DrvDisable();
             }

           DrvDeinitialize();
           }
        }
      }

                /* Выключить систему ОС */
Запуск: int DrvDisable(void);
Назначение: Закончить сеанс управления УСО
Аргументы: --//--
Результат: DRV_OK     - Сеанс управления УСО закончен успешно
           DRV_FAILED - Ошибка во время окончания сеанса
Описание:
       Закрывает текуший сеанс управления УСО. После выполнения этой
  функции посылка/получение сигналов на/с ЦАП/АЦП невозможна.
Пример:

    /* ... */
    main()
      {
      if(DrvIsPresent())
        {
        if(DrvInitialize()==DRV_OK)
           {

           /* Подготовительные действия перед сеансом управления */

           if(DrvEnable(120)==DRV_OK)
             {

             /* сеанс управления УСО */

             DrvDisable(); /* <-- Закончить сеанс управления УСО */
             }

           DrvDeinitialize();
           }
        }
      }

                /* Установить функцию слежения в ОС */
int DrvSetHook(HookPtr *HookFun);
                /* Снять функцию слежения с ОС */
int DrvClrHook(void);

                /* Установить число используемых каналов ЦАП/АЦП */
int _DrvSetChannel(Word NumDAC,Word NumADC);
int DrvSetChannel(Word NumDAC,Word NumADC);



2. Управление УСО.

                /* Прочитать текущие значения на всех каналах АЦП */
int _DrvGetVolADC(Word far *ADCbuf);
int huge DrvGetVolADC(float far *ADCbuf);
                /* Установить начальные значения на всех каналах ЦАП */
int _DrvSetVolDAC(Word far *DACbuf);
int huge DrvSetVolDAC(float far *DACbuf);

                /* Передать на ЦАП / снять с АЦП новые значения с ожиданием */
int _DrvVolume(Word far *DACbuf,Word far *ADCbuf);
int DrvVolume(float far *DACbuf,float far *ADCbuf);

                /* Взять адреса областей хранения данных ЦАП/АЦП */
int _DrvGetBuf(Word far *far *DACbuf,Word far *far *ADCbuf);
int DrvGetBuf(float far *far *DACbuf,float far *far *ADCbuf);

                /* Установить новые значения ЦАП и прочитать АЦП */
int DrvWaitDAC_ADC(void);

                /* Обнулить число пропущенных тактов */
int DrvClrSkipped(void);


3. Информация по работе УСО и драйвера.

                /* Взять число пропущенных тактов */
int DrvGetSkipped(unsigned long far *val);
                /* Взять описание последней ошибки драйвера */
int DrvGetErrorMsg(char far *str);

4. Информация по установленному оборудованию и драйверу УСО

                /* Взять строку авторских прав */
int DrvGetCopyright(char far *str);
                /* Взять строку названия драйвера */
int DrvGetName(char far *str);
                /* Взять версию драйвера */
int DrvGetVersion(int far *ver);
                /* Взять максимально возможную частоту */
int DrvGetMaxFreq(unsigned long far *val);
                /* Взять максимальное число каналов ЦАП/АЦП */
int DrvGetMaxChannel(Word far *NumDAC,Word far *NumADC);
                /* Взять мах возможный уровень ЦАП */
int DrvGetInfoDAC(Word far *NumDAC);
                /* Взять мах возможный уровень АЦП */
int DrvGetInfoADC(Word far *NumADC);


        Драйвер УСО для доступа к своим функциям предоставляет главной
программе таблицу адресов этих функций. Для первоначальной связи с драйвером
используется прерывание DOS 2Fh. Используя подфункцию AL=0 этого прерывания,
необходимо найти канал, занятый драйвером УСО для дальнейшего использования.
В канале ( AH=номер канала от 0 до FFh) доступны следующие подфункции:
  AL   Действие драйвера
 ---  -------------------------------------
  0   Вернуть адрес идентификационной строки
  1   Инициализация драйвера и УСО
  2   Деинициализация драйвера и УСО
  3   Вернуть адрес таблицы функций управления
  4   Вернуть наименование драйвера
  5   Вернуть адрес строки описания последней ошибки
        Регистр AX содержит результат выполнения предписанных действий.
Адрес возвращается в регистрах DX:BX. Далее представлен формат таблицы
функций управления УСО в нотации языка С.

typedef struct
{
 int version;

 /* --- identification --- */
 char far *TableID;

 /* --- copyright,name --- */
 char far *Copyright;
 char far *NameDRV;

 /* --- initialize --- */
 int pascal (far *_Enable)(Word DivHi,Word DivLo);
 int pascal (far *_Disable)(void);
 int pascal (far *_GetVolADC)(Word far *ADCbuf);  /* current ADC vol */
 int pascal (far *_SetVolDAC)(Word far *DACbuf);  /* initialize DAC vol */

 /* --- usage --- */
 int pascal (far *_SetHook)(HookPtr HookFun);
 int pascal (far *_ClrHook)(void);
 int pascal (far *_Volume)(Word far *DACbuf,Word far *ADCbuf);
 int pascal (far *_GetBuf)(Word far *far *DACbuf,Word far *far *ADCbuf);
 int pascal (far *_WaitDAC_ADC)(void);

 /* --- channel --- */
 int pascal (far *_SetChannel)(int numDAC,int numADC);

 /* --- Skipped --- */
 int pascal (far *_ClrSkipped)(void);
 int pascal (far *_GetSkipped)(unsigned long far *val);

 /* --- Info --- */
 int pascal (far *_GetMaxFreq)(unsigned long far *val);
 int pascal (far *_GetMaxChannel)(Word far *dac,Word far *adc);
 int pascal (far *_GetInfoDAC)(Word far *dac);
 int pascal (far *_GetInfoADC)(Word far *adc);

} DRV_Table;

