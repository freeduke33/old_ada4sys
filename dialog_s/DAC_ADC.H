
/*
   Application program inteface for UPI`s drivers

   History version of driver`s table:

     v1 -- base revision
     v2 -- first public release
     v3 -- added support for digital & mappable analog channel

 */


#ifndef __DAC__ADC__
#define __DAC__ADC__

/* Next line disable validate table version in UPI's driver */
// #define NOCHECK_TABLE_VER


#ifdef __cplusplus
  extern "C" {
#endif

typedef unsigned char      Byte;
typedef unsigned short int Word;
typedef unsigned long      DWord;

typedef void interrupt (far *HookPtr)(void);

typedef struct { Word Unit,Slot,Channel; } UnitUPI;

#define DRV_OK         0
#define DRV_FAILED    -1
#define DRV_NONE      -2
#define DRV_ERRARG    -3
#define DRV_ERRFUN    -4
#define DRV_NOSUPPORT -5  /* <<3>>  */


                /* –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ –¶–ê–ü/–ê–¶–ü –≤ –ø–∞–º—è—Ç–∏ */
int DrvIsPresent(void);
                /* –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä –¶–ê–ü/–ê–¶–ü */
int DrvInitialize(void);
                /* –î–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä –¶–ê–ü/–ê–¶–ü */
int DrvDeinitialize(void);
                /* –í–∑—è—Ç—å —Å—Ç—Ä–æ–∫—É –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤ */
int DrvGetCopyright(char far *str);
                /* –í–∑—è—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ */
int DrvGetName(char far *str);
                /* –í–∑—è—Ç—å –≤–µ—Ä—Å–∏—é –¥—Ä–∞–π–≤–µ—Ä–∞ */
int DrvGetVersion(short int far *ver);
                /* –î–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞ */
int DrvGetErrorMsg(char far *str);

                /* –í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –û–° */
int DrvEnable(float Freq);
int _DrvEnable(Word DivHi,Word DivLo);
                /* –í—ã–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –û–° */
int DrvDisable(void);
int _DrvDisable(void);
                /* –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–ª–µ–∂–µ–Ω–∏—è –≤ –û–° */
int DrvSetHook(HookPtr *HookFun);
                /* –°–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–ª–µ–∂–µ–Ω–∏—è —Å –û–° */
int DrvClrHook(void);

/* ------------------------- –ê–Ω–∞–ª–æ–≥–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã ----------------------- */
                /* –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö –ê–¶–ü */
int huge _DrvGetVolADC(Word far *ADCbuf);
int huge DrvGetVolADC(float far *ADCbuf);
                /* –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö –¶–ê–ü */
int huge _DrvSetVolDAC(Word far *DACbuf);
int huge DrvSetVolDAC(float far *DACbuf);
                /* –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö –¶–ê–ü */
int huge _DrvGetVolDAC(Word far *DACbuf);
int huge DrvGetVolDAC(float far *DACbuf);


                /* –ü–µ—Ä–µ–¥–∞—Ç—å –Ω–∞ –¶–ê–ü / —Å–Ω—è—Ç—å —Å –ê–¶–ü –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è */
int _DrvVolume(Word far *DACbuf,Word far *ADCbuf);
int DrvVolume(float far *DACbuf,float far *ADCbuf);
                /* –í–∑—è—Ç—å –∞–¥—Ä–µ—Å–∞ –æ–±–ª–∞—Å—Ç–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¶–ê–ü/–ê–¶–ü */
int _DrvGetBuf(Word far *far *DACbuf,Word far *far *ADCbuf);
int DrvGetBuf(float far *far *DACbuf,float far *far *ADCbuf);
                /* –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¶–ê–ü –∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ê–¶–ü */
int DrvWaitDAC_ADC(void);

                /* –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∏—Å–ª–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¶–ê–ü/–ê–¶–ü */
int _DrvSetChannel(Word NumDAC,Word NumADC);
int DrvSetChannel(Word NumDAC,Word NumADC);

                /* –û–±–Ω—É–ª–∏—Ç—å —á–∏—Å–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–∞–∫—Ç–æ–≤ */
int DrvClrSkipped(void);
                /* –í–∑—è—Ç—å —á–∏—Å–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–∞–∫—Ç–æ–≤ */
int DrvGetSkipped(unsigned long far *val);

                /* –í–∑—è—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—É—é —á–∞—Å—Ç–æ—Ç—É */
int DrvGetMaxFreq(unsigned long far *val);
                /* –í–∑—è—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–∞–Ω–∞–ª–æ–≤ –¶–ê–ü/–ê–¶–ü */
int DrvGetMaxChannel(Word far *NumDAC,Word far *NumADC);
                /* –í–∑—è—Ç—å –º–∞—Ö –≤–æ–∑–º–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¶–ê–ü */
int DrvGetInfoDAC(Word far *NumDAC);
                /* –í–∑—è—Ç—å –º–∞—Ö –≤–æ–∑–º–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ê–¶–ü */
int DrvGetInfoADC(Word far *NumADC);


                /* <<3>> –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –¶–ê–ü */
int DrvSetupDAC(Word Chl, UnitUPI *hdwDAC);
                /* <<3>> –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –ê–¶–ü */
int DrvSetupADC(Word Chl, UnitUPI *hdwADC);

/* ------------------------- –¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã ----------------------- */
                /* <<3>> –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Å –≤—Ö–æ–¥–Ω—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ */
int DrvGetDigIN(Word Chl,Byte far *INbuf);
                /* <<3>> —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö */
int DrvSetDigOUT(Word Chl,Byte OUTbuf);
                /* <<3>> –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö */
int DrvGetDigOUT(Word Chl,Byte far *OUTbuf);
                /* <<3>> –¥–∞—Ç—å —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ */
int DrvGetMaxDigital(Word far *NumIN,Word far *NumOUT);

                /* <<3>> –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –≤—Ö–æ–¥–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã */
int DrvSetupDigIN(Word Chl, UnitUPI *hdwIN);
                /* <<3>> –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã */
int DrvSetupDigOUT(Word Chl, UnitUPI *hdwOUT);


/* ==============[ internal ]================= */

#define DRV_IDstring "Stend driver for DAC/ADC"

typedef struct
{
 short int version;

 /* --- identification --- */
 char far *TableID;

 /* --- copyright,name --- */
 char far *Copyright;
 char far *NameDRV;

 /* --- initialize --- */
 int pascal (far *_Enable)(Word DivHi,Word DivLo);
 int pascal (far *_Disable)(void);
 int pascal (far *_GetVolADC)(Word far *ADCbuf);  /* current ADC vol */
 int pascal (far *_SetVolDAC)(Word far *DACbuf);  /* initialize DAC vol */

 /* --- usage --- */
 int pascal (far *_SetHook)(HookPtr HookFun);
 int pascal (far *_ClrHook)(void);
 int pascal (far *_Volume)(Word far *DACbuf,Word far *ADCbuf);
 int pascal (far *_GetBuf)(Word far *far *DACbuf,Word far *far *ADCbuf);
 int pascal (far *_WaitDAC_ADC)(void);

 /* --- channel --- */
 int pascal (far *_SetChannel)(Word numDAC,Word numADC);

 /* --- Skipped --- */
 int pascal (far *_ClrSkipped)(void);
 int pascal (far *_GetSkipped)(DWord far *val);

 /* --- Info --- */
 int pascal (far *_GetMaxFreq)(DWord far *val);
 int pascal (far *_GetMaxChannel)(Word far *dac,Word far *adc);
 int pascal (far *_GetInfoDAC)(Word far *dac);
 int pascal (far *_GetInfoADC)(Word far *adc);

 /* ============================================ Added from version 3.0 === */

 /* --- Setup analog part --- */
 int pascal (far *_DrvSetupDAC)(Word Chl, UnitUPI *hdwDAC);
 int pascal (far *_DrvSetupADC)(Word Chl, UnitUPI *hdwADC);

 /* --- usage digital --- */
 int pascal (far *_DrvGetDigIN)(Word Chl,Word far *INbuf);
 int pascal (far *_DrvSetDigOUT)(Word Chl,Word OUTbuf);
 int pascal (far *_DrvGetDigOUT)(Word Chl,Word far *OUTbuf);

 /* --- digital info --- */
 int pascal (far *_DrvGetMaxDigital)(Word far *NumIN,Word far *NumOUT);

 /* --- Setup digital part --- */
 int pascal (far *_DrvSetupDigIN)(Word Cnt, UnitUPI *hdwIN);
 int pascal (far *_DrvSetupDigOUT)(Word Cnt, UnitUPI *hdwOUT);

} DRV_Table_T,far *DRV_Table_P,far *far *DRV_Table_I;


extern DRV_Table_T __FuncTable__;


int DrvGetFuncTable(DRV_Table_I tbl);


#ifdef __cplusplus
  }
#endif


/* ==============[ macroses ]================= */

#ifdef NOCHECK_TABLE_VER
# define DoCheckTableVer(a,b) b
#else
# define DoCheckTableVer(a,b) ((__FuncTable__.version>=a) ? b : DRV_NOSUPPORT)
#endif


#ifndef LOOPBACK

#define _DrvEnable(a,b)        __FuncTable__._Enable(a,b)
#define _DrvDisable()          __FuncTable__._Disable()
#define _DrvGetVolADC(a)       __FuncTable__._GetVolADC(a)
#define _DrvSetVolDAC(a)       __FuncTable__._SetVolDAC(a)

#define DrvSetHook(a)          __FuncTable__._SetHook(a)
#define DrvClrHook()           __FuncTable__._ClrHook()
#define _DrvVolume(a,b)        __FuncTable__._Volume(a,b)

#define _DrvGetBuf(a,b)        __FuncTable__._GetBuf(a,b)
#define DrvWaitDAC_ADC()       __FuncTable__._WaitDAC_ADC()

#define _DrvSetChannel(a,b)    __FuncTable__._SetChannel(a,b)

#define DrvClrSkipped()        __FuncTable__._ClrSkipped()
#define DrvGetSkipped(a)       __FuncTable__._GetSkipped(a)

#define DrvGetMaxFreq(a)       __FuncTable__._GetMaxFreq(a)
#define DrvGetMaxChannel(a,b)  __FuncTable__._GetMaxChannel(a,b)
#define DrvGetInfoDAC(a)       __FuncTable__._GetInfoDAC(a)
#define DrvGetInfoADC(a)       __FuncTable__._GetInfoADC(a)

/* v3.0 */
#define DrvSetupDAC(a,b)       DoCheckTableVer(3,__FuncTable__._DrvSetupDAC(a,b))
#define DrvSetupADC(a,b)       DoCheckTableVer(3,__FuncTable__._DrvSetupADC(a,b))

#define DrvGetDigIN(a,b)       DoCheckTableVer(3,__FuncTable__._DrvGetDigIN(a,b))
#define DrvSetDigOUT(a,b)      DoCheckTableVer(3,__FuncTable__._DrvSetDigOUT(a,b))
#define DrvGetDigOUT(a,b)      DoCheckTableVer(3,__FuncTable__._DrvGetDigOUT(a,b))

#define DrvGetMaxDigital(a,b)  DoCheckTableVer(3,__FuncTable__._DrvGetMaxDigital(a,b))

#define DrvSetupDigIN(a,b)     DoCheckTableVer(3,__FuncTable__._DrvSetupDigIN(a,b))
#define DrvSetupDigOUT(a,b)    DoCheckTableVer(3,__FuncTable__._DrvSetupDigOUT(a,b))

#else

#define _DrvEnable(a,b)        ((1) ? DRV_OK : DRV_OK)
#define _DrvDisable()          ((1) ? DRV_OK : DRV_OK)
#define _DrvGetVolADC(a)       ((1) ? DRV_OK : DRV_OK)
#define _DrvSetVolDAC(a)       ((1) ? DRV_OK : DRV_OK)

#define DrvSetHook(a)          ((1) ? DRV_OK : DRV_OK)
#define DrvClrHook()           ((1) ? DRV_OK : DRV_OK)
#define _DrvVolume(a,b)        ((1) ? DRV_OK : DRV_OK)

#define _DrvGetBuf(a,b)        ((1) ? DRV_OK : DRV_OK)
#define DrvWaitDAC_ADC()       ((1) ? DRV_OK : DRV_OK)

#define _DrvSetChannel(a,b)    ((1) ? DRV_OK : DRV_OK)

#define DrvClrSkipped()        ((1) ? DRV_OK : DRV_OK)
#define DrvGetSkipped(a)       ((1) ? DRV_OK : DRV_OK)

#define DrvGetMaxFreq(a)       ((1) ? DRV_OK : DRV_OK)
#define DrvGetMaxChannel(a,b)  ((1) ? DRV_OK : DRV_OK)
#define DrvGetInfoDAC(a)       ((1) ? DRV_OK : DRV_OK)
#define DrvGetInfoADC(a)       ((1) ? DRV_OK : DRV_OK)

/* v3.0 */
#define DrvSetupDAC(a,b)       ((1) ? DRV_OK : DRV_NOSUPPORT)
#define DrvSetupADC(a,b)       ((1) ? DRV_OK : DRV_NOSUPPORT)
#define DrvGetDigIN(a,b)       ((1) ? DRV_OK : DRV_NOSUPPORT)
#define DrvSetDigOUT(a,b)      ((1) ? DRV_OK : DRV_NOSUPPORT)
#define DrvGetDigOUT(a,b)      ((1) ? DRV_OK : DRV_NOSUPPORT)

#define DrvGetMaxDigital(a,b)  ((1) ? DRV_OK : DRV_NOSUPPORT)

#define DrvSetupDigIN(a,b)     ((1) ? DRV_OK : DRV_NOSUPPORT)
#define DrvSetupDigOUT(a,b)    ((1) ? DRV_OK : DRV_NOSUPPORT)

#endif

#endif
